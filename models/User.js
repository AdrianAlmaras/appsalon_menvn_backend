import mongoose from 'mongoose';
import bcrypt from 'bcrypt'
import {  uniqueId  } from '../utils/index.js';

const userSchema = mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    password: {
        type: String,
        required: true,
        trim: true
    },
    email: {
        type: String,
        required: true,
        trim: true,
        unique: true,
        lowercase: true
    },
    token: {
        type: String,
        default: uniqueId // valor por default mandar a llamr uniqueId
    },
    verified: {
        type: Boolean,
        default: false
    },
    admin: {
        type: Boolean,
        default: false
    }
});

/*
Un middleware en Mongoose (y tambi√©n en Express, etc.) es una funci√≥n que se ejecuta autom√°ticamente en cierto punto del ciclo de vida de un documento.

En Mongoose, hay middleware pre y post para operaciones como:

.save() (guardar)

.validate() (validaci√≥n)

.remove() (eliminar)

.update() (actualizar)

Te permiten intervenir antes o despu√©s de que Mongoose haga algo.

 ¬øQu√© es un hook?
"Hook" es b√°sicamente sin√≥nimo de "middleware" en este contexto, aunque el t√©rmino hook se refiere m√°s a la acci√≥n que dispara el middleware.

üîÅ Ejemplo:

Hook: "save" (guardar el documento)

Middleware: funci√≥n que se ejecuta cuando se dispara ese hook


¬øQu√© hace next()?
next() es una funci√≥n que Mongoose proporciona autom√°ticamente al middleware, y se usa para decirle:

‚ÄúYa termin√© aqu√≠, puedes seguir con lo que sigue.‚Äù

üìå Si no llamas a next(), el proceso se queda atorado y nunca termina (salvo que uses async/await correctamente y no necesites next, como veremos abajo).
*/



// pre('save') es un hook que se ejecuta antes de que se ejecute .save() - sirve para ejecutar c√≥digo autom√°ticamente antes de que un documento se guarde en la base de datos
// Si la contrase√±a fue modificada, la convierte a un hash seguro usando bcrypt.
userSchema.pre('save', async function (next) {
    if(!this.isModified('password')) {
        return next()  // Si el campo 'password' no ha sido modificado, pasa al siguiente paso
    }

    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash( this.password, salt );
    next(); //  funci√≥n que Mongoose proporciona autom√°ticamente al middleware, y se usa para decirle: ‚ÄúYa termin√© aqu√≠, puedes seguir con lo que sigue.‚Äù
})

// Compara una contrase√±a ingresada con la almacenada hasheada.
// Devuelve true si coinciden.
userSchema.methods.checkPassword = async function(inputPassword) {
    return await bcrypt.compare(inputPassword, this.password)
}


const User = mongoose.model('User', userSchema);

export default User

